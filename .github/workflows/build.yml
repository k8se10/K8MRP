name: K8MRP Build (Gradle + Loom 1.11)

on:
  push:
    branches: [ main, master ]
    tags: [ "v*", "alpha*", "beta*" ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch: {}

jobs:
  build:
    runs-on: ubuntu-latest
    permissions: { contents: write }

    steps:
      - uses: actions/checkout@v4

      - name: Detect Gradle project dir
        id: detect
        shell: bash
        run: |
          set -e
          if [ -f "./gradlew" ] || [ -f "./settings.gradle" ] || [ -f "./settings.gradle.kts" ]; then
            echo "PROJECT_DIR=." >> $GITHUB_ENV
          else
            found="$(find . -mindepth 2 -maxdepth 4 -type f \( -name gradlew -o -name settings.gradle -o -name settings.gradle.kts \) | head -n1)"
            [ -n "$found" ] || { echo "::error::No Gradle project found"; exit 1; }
            echo "PROJECT_DIR=$(dirname "$found")" >> $GITHUB_ENV
          fi
          echo "Using PROJECT_DIR=${PROJECT_DIR:-.}"

      - name: Install SDKMAN + latest Gradle
        shell: bash
        run: |
          set -e
          curl -s https://get.sdkman.io | bash
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          sdk install gradle
          gradle --version | sed -n 's/^Gradle \([0-9.]\+\).*/GRADLE_VER=\1/p' >> $GITHUB_ENV

      - name: Generate/refresh Gradle wrapper
        shell: bash
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -e
          source "$HOME/.sdkman/bin/sdkman-init.sh"
          if [ ! -f gradlew ]; then gradle wrapper --gradle-version "${GRADLE_VER}"; else chmod +x gradlew; ./gradlew wrapper --gradle-version "${GRADLE_VER}"; fi
          chmod +x gradlew

      - name: Ensure plugin repositories + Loom 1.11
        shell: bash
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -e
          # 1) Make sure settings.gradle has pluginManagement with Fabric maven + Plugin Portal
          if [ -f settings.gradle ] || [ -f settings.gradle.kts ]; then
            FILE=$( [ -f settings.gradle.kts ] && echo settings.gradle.kts || echo settings.gradle )
            if ! grep -q "pluginManagement" "$FILE"; then
              cat >> "$FILE" <<'EOF'

pluginManagement {
  repositories {
    maven { url = uri("https://maven.fabricmc.net/") }
    gradlePluginPortal()
    mavenCentral()
  }
}
EOF
            fi
          fi
          # 2) Force Loom to a released version (1.11)
          for f in build.gradle build.gradle.kts settings.gradle settings.gradle.kts; do
            [ -f "$f" ] || continue
            sed -i -E "s/(id\\s*'fabric-loom'\\s*version\\s*')[^']+'/\\11.11'/g" "$f" || true
            sed -i -E "s/(id\\(\"fabric-loom\"\\)\\s*version\\s*\")[^\"]+\"/\\11.11\"/g" "$f" || true
          done
          echo "Final plugin lines:"
          grep -R --line-number -E "fabric-loom" || true

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v2
        with: { build-root-directory: ${{ env.PROJECT_DIR }} }

      - name: Set up JDK 21 (required by Loom â‰¥1.9/1.11)
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: gradle

      - uses: gradle/actions/setup-gradle@v3

      - name: Show Gradle versions
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          ./gradlew --version || true

      - name: Build (Fabric Loom)
        working-directory: ${{ env.PROJECT_DIR }}
        env: { GRADLE_OPTS: "-Dorg.gradle.daemon=false -Dorg.gradle.jvmargs=-Xmx3g" }
        run: ./gradlew clean build --stacktrace --no-daemon

      - name: Upload mod jars
        uses: actions/upload-artifact@v4
        with:
          name: k8mrp-mod-jars
          path: ${{ env.PROJECT_DIR }}/build/libs/*.jar
          if-no-files-found: error
          retention-days: 30

      - name: Release on tag
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.PROJECT_DIR }}/build/libs/*.jar
          generate_release_notes: true
        env: { GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} }
