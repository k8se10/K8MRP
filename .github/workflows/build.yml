name: K8MRP Build (stable Loom + Gradle)

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*', 'alpha*', 'beta*' ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      project-dir:
        description: 'Path to the Gradle project (".": repo root)'
        required: false
        default: '.'

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write

    env:
      LOOM_VERSION: '1.11'
      GRADLE_VERSION: '8.10.2'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set PROJECT_DIR
        shell: bash
        run: |
          if [ -n "${{ github.event.inputs.project-dir }}" ]; then
            echo "PROJECT_DIR=${{ github.event.inputs.project-dir }}" >> "$GITHUB_ENV"
          else
            echo "PROJECT_DIR=." >> "$GITHUB_ENV"
          fi
          echo "Using PROJECT_DIR=$PROJECT_DIR"

      - name: Show layout
        shell: bash
        run: |
          echo "PROJECT_DIR=$PROJECT_DIR"
          ls -la
          echo "----"
          ls -la "$PROJECT_DIR" || true
          echo "----"
          find "$PROJECT_DIR" -maxdepth 3 -name gradlew -print || true

      - name: Ensure pluginManagement repos (Fabric maven)
        shell: bash
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -e
          FILE=""
          if [ -f "settings.gradle.kts" ]; then FILE="settings.gradle.kts"; fi
          if [ -z "$FILE" ] && [ -f "settings.gradle" ]; then FILE="settings.gradle"; fi
          if [ -z "$FILE" ]; then
            echo "No settings.gradle(.kts); creating settings.gradle with pluginManagement."
            cat > settings.gradle <<'EOF'
pluginManagement {
  repositories {
    maven { url = uri("https://maven.fabricmc.net/") }
    gradlePluginPortal()
    mavenCentral()
  }
}
rootProject.name = "K8MRP"
EOF
          else
            if ! grep -q "pluginManagement" "$FILE"; then
              echo "Appending pluginManagement block to $FILE"
              cat >> "$FILE" <<'EOF'

pluginManagement {
  repositories {
    maven { url = uri("https://maven.fabricmc.net/") }
    gradlePluginPortal()
    mavenCentral()
  }
}
EOF
            fi
          fi

      - name: Pin Fabric Loom to a stable version
        shell: bash
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -e
          for f in build.gradle build.gradle.kts settings.gradle settings.gradle.kts; do
            [ -f "$f" ] || continue
            # Groovy DSL
            sed -i -E "s/(id[[:space:]]*'fabric-loom'[[:space:]]*version[[:space:]]*')[^']*'/\\1${LOOM_VERSION}'/g" "$f" || true
            # Kotlin DSL
            sed -i -E "s/(id\\(\"fabric-loom\"\\)[[:space:]]*version[[:space:]]*\")[^\"]*\"/\\1${LOOM_VERSION}\"/g" "$f" || true
          done
          echo "Plugin lines:"
          grep -R --line-number -E "fabric-loom" || true

      - name: Bootstrap/refresh Gradle wrapper
        shell: bash
        working-directory: ${{ env.PROJECT_DIR }}
        run: |
          set -e
          if [ ! -f "./gradlew" ]; then
            echo "No wrapper found; installing Gradle ${GRADLE_VERSION} and generating wrapper..."
            curl -s https://get.sdkman.io | bash
            source "$HOME/.sdkman/bin/sdkman-init.sh"
            sdk install gradle "${GRADLE_VERSION}"
            gradle wrapper --gradle-version "${GRADLE_VERSION}"
          fi
          chmod +x ./gradlew
          ./gradlew wrapper --gradle-version "${GRADLE_VERSION}"

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@v2
        with:
          build-root-directory: ${{ env.PROJECT_DIR }}

      - name: Set up JDK 21
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: 21
          cache: gradle

      - name: Set up Gradle cache
        uses: gradle/actions/setup-gradle@v3

      - name: Show Gradle version (wrapper)
        working-directory: ${{ env.PROJECT_DIR }}
        run: ./gradlew --version

      - name: Build (Fabric Loom)
        working-directory: ${{ env.PROJECT_DIR }}
        env:
          GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs=-Xmx3g
        run: ./gradlew clean build --stacktrace --no-daemon

      - name: Upload mod jars
        uses: actions/upload-artifact@v4
        with:
          name: k8mrp-mod-jars
          path: ${{ env.PROJECT_DIR }}/build/libs/*.jar
          if-no-files-found: error
          retention-days: 30

      - name: Create GitHub Release (on tag)
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: ${{ env.PROJECT_DIR }}/build/libs/*.jar
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
